#! /bin/bash
versionNum=v0.1.5.5
xEcho(){
    local val1="${1}" val2="${2}" val3="${3}";echo -en "\033[1;33m${val1}\033[0m";echo -en "\033[1;31m${val2}\033[0m";echo -en "\033[1;33m${val3}\033[0m"; echo -e "\033[1;31m does not exist\033[0m"
}
#----------------    User info Config    ---------------------------
export userPassword=
#----------------    update config  ------------------
export isAutoUpdate=
#----------------    PS1 config  ------------------
export isUseCustomPS1=
export PROMPT_COMMAND='ftSetBashPs1ByGitBranch;history -a'
#----------------    bash history config  ------------------
export isUseXbashHistory=
#----------------    Android development environment config    ---------------------------
export isUseCustomAndroidDevEnvConfig=
if [[ "$isUseCustomAndroidDevEnvConfig" = "true" ]]; then
    dirPathOracleJdk6=${rDirPathTools}/jdk/1.6.038
    dirPathOpenJdk7=/usr/lib/jvm/java-7-openjdk-amd64
    dirPathOpenJdk8=/usr/lib/jvm/java-8-openjdk-amd64
    jdkHomePath=$dirPathOpenJdk8

    dirPathOpenGcc44=/usr/bin/gcc-4.4
    dirPathOpenGcc46=/usr/bin/gcc-4.6
    dirPathOpenGcc48=/usr/bin/gcc-4.8
    gccPath=${dirPathOpenGcc48}

    #modify the current java&gcc configuration according to the android sdk version
    sdkVersion=24 # default
    filePath=build/core/version_defaults.mk
    if [[ -f "$filePath" ]]; then
            key="PLATFORM_SDK_VERSION := "
            sdkVersion=$(cat $filePath | grep "$key")
            sdkVersion=${sdkVersion//$key/}
            sdkVersion=$(echo $sdkVersion |sed s/[[:space:]]//g)
    fi
    [[ -n "${targetSdkVersionForce}" ]] && sdkVersion = $targetSdkVersionForce
    if (( $sdkVersion>=24 ));then
            jdkHomePath=$dirPathOpenJdk8
            gccPath=${dirPathOpenGcc48}
    elif (( $sdkVersion<21 ));then
            jdkHomePath=$dirPathOracleJdk6
            gccPath=${dirPathOpenGcc44}
    else
            jdkHomePath=$dirPathOpenJdk7
            gccPath=${dirPathOpenGcc46}
    fi

    if [[ -d "$jdkHomePath" ]]; then
        #java config
        filePathJava=${jdkHomePath}/bin/java
        [[ "$isResetJdk" = "true" ]] && if [[ -f "$filePathJava" ]]; then
            filePathJavaList=($filePathJava ${filePathJava}c ${filePathJava}p ${filePathJava}ws ${filePathJava}doc ${filePathJava}h)
            configList=(java javac javap javaws javadoc javah)

            ftEcho -s "upadte jdk config"
            echo "$(echo "$userPassword" | sudo -S -p '' echo " " > /dev/null)" >/dev/null
            for index in "${!filePathJavaList[@]}"; do
                path=${filePathJavaList[$index]}
                config=${configList[$index]}
                if [[ ! -f "${path}" ]] ;then
                    [[ "$isResetJdk" = "true" ]]  && xEcho "${config} "  "config skip : " ${path}
                    continue
                fi
                [[ -z $(update-alternatives --list $config|grep $path) ]] && sudo -p '' -S  update-alternatives --install /usr/bin/${config} $config $path 300
                echo "$path" | sudo -p '' -S update-alternatives --config $config >/dev/null
            done
            java -version
        else xEcho "Java " "local config error : " ${filePathJava}; fi

        # java env
        export JAVA_HOME=$jdkHomePath
        export JRE_HOME=${JAVA_HOME}/jre
        export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib

        export ANDROID_SET_JAVA_HOME=true
        export ANDROID_PRE_BUILD_PATHS=$JAVA_HOME
        export ANDROID_JAVA_TOOLCHAIN=$JAVA_HOME

        #clean up the java environment item in the PATH environment variable
        PATHLOCAL=
        newList=($(echo "${PATH}"| sed 's?:? ?g'))
        for item in ${newList[@]}; do
            [[ -n $(echo $item |egrep -i "java|jdk|jre") ]] && continue
            [[ -z ${PATHLOCAL} ]] && PATHLOCAL="${item}" || PATHLOCAL="${PATHLOCAL}:${item}"
        done
        export PATH=${PATHLOCAL}
        export PATH=$PATH:${JAVA_HOME}/bin:${JRE_HOME}/bin
    else xEcho "Java " "env config error : " ${jdkHomePath}; fi

    #GCC&G++
    [[ "$isResetGcc" = "true" ]] && if [[ -f "$gccPath" ]] ;then
        ftEcho -s "update gcc&g++ config"
        echo "$(echo "$userPassword" | sudo -S -p '' echo " " > /dev/null)" >/dev/null
        #sudo update-alternatives --remove gcc /usr/bin/gcc-x.x
        [[ -z $(update-alternatives --list gcc|grep $gccPath) ]] && sudo -p '' -S  update-alternatives --install /usr/bin/gcc gcc $gccPath 300
        echo "$gccPath" | sudo -p '' -S update-alternatives --config gcc >/dev/null
        gccPath=$(echo $gccPath | sed "s cc ++ g" )
        [[ -z $(update-alternatives --list gcc|grep $gccPath) ]] && sudo -p '' -S  update-alternatives --install /usr/bin/g++ g++ $gccPath 300
        echo "$gccPath" | sudo -p '' -S update-alternatives --config g++ >/dev/null
        gcc -v
    else xEcho "GCC & G++ " "config error : " ${gccPath}; fi

    #Android SDK
    dirPathAndroidSdk=${dirPathHomeTools}/Sdk
    if [[ -d "$dirPathAndroidSdk" ]]; then
        export ANDROID_SDK="${dirPathAndroidSdk}"
        export ANDROID_HOME=$ANDROID_SDK
        export ANDROID_SDK_HOME=$ANDROID_SDK
        #export ANDROID_SDK_BUILD_TOOL=${ANDROID_SDK_HOME}/build-tools/android-4.4W
        #export PATH=$PATH:$ANDROID_SDK_BUILD_TOOL

        #环境更新
        PATHLOCAL=
        newList=($(echo "${PATH}"| sed 's?:? ?g'))
        for item in ${newList[@]}; do
            [[ -n $(echo $item |egrep -i "sdk") ]] && continue
            [[ -z ${PATHLOCAL} ]]&&PATHLOCAL="${item}" || PATHLOCAL="${PATHLOCAL}:${item}"
        done
        export PATH=${PATHLOCAL}:$ANDROID_SDK
    else xEcho "Android SDK " "config error : " ${dirPathAndroidSdk}; fi

    #Android NDK
    dirPathAndroidNdk=${dirPathHomeTools}/ndk/android-ndk-r12b
    if [[ -d "$dirPathAndroidNdk" ]]; then
        export ANDROID_NDK="${dirPathAndroidNdk}"
        #环境更新
        PATHLOCAL=
        newList=($(echo "${PATH}"| sed 's?:? ?g'))
        for item in ${newList[@]}; do
            [[ -n $(echo $item |egrep -i "ndk") ]] && continue
            [[ -z ${PATHLOCAL} ]]&&PATHLOCAL="${item}" || PATHLOCAL="${PATHLOCAL}:${item}"
        done
        export PATH=${PATHLOCAL}:$ANDROID_NDK
    else xEcho "Android NDK " "config error : " ${dirPathAndroidNdk}; fi

    # flutter SDK
    dirPathFlutterSDK=${dirPathHomeTools}/flutter/bin
    if [[ -d "$dirPathFlutterSDK" ]]; then
        #环境更新
        PATHLOCAL=
        newList=($(echo "${PATH}"| sed 's?:? ?g'))
        for item in ${newList[@]}; do
            [[ -n $(echo $item |egrep -i "flutter") ]] && continue
            [[ -z ${PATHLOCAL} ]]&&PATHLOCAL="${item}" || PATHLOCAL="${PATHLOCAL}:${item}"
        done
        export PATH=${PATHLOCAL}:${dirPathFlutterSDK}
    else xEcho "flutter SDK " "config error : " ${dirPathFlutterSDK}; fi

    #other
    [[ -z $(echo $PATH |grep "/usr/libexec/git-core") ]] && export PATH=$PATH:/usr/libexec/git-core
    [[ -z $(echo $PATH |grep "$dirPathHomeTools") ]] && export PATH=$PATH:$dirPathHomeTools
fi

#----------------    Android optimization acceleration    ---------------------------
#android build cache
export isUseBuildCcache=
if [ "$isUseBuildCcache" = "true" ]&&[[ -n $(which ccache) ]]; then
    export CCACHE_DEV_DIR=xxxx
    if [[ -d "${CCACHE_DEV_DIR}" ]]; then
        dirPathCache=${CCACHE_DEV_DIR}/.ccache
        [ ! -d $dirPathCache  ]&& mkdir $dirPathCache
        if [[ -d "${dirPathCache}" ]]; then
            export CCACHE_DIR=$dirPathCache
            export USE_CCACHE=1
            export CACHE_UMASK=002
            unset CCACHE_HARDLINK
        else xEcho "Android build cache " "config error : " ${dirPathCache}; fi
     else xEcho "Android build cache " "config error : " ${CCACHE_DEV_DIR} ; fi
fi

#distributed compilation cluster IP group
# isUseDistcc=
# if [[ "$isUseDistcc" = "true" ]]; then
#     export PATH=/usr/lib/distcc:$PATH
#     # export WRAPPER=ccache
#     # export CCACHE_PREFIX=distcc
#     export DISTCC_HOSTS="localhost 192.168.1.55"
# fi

#----------------    Android decompile    ---------------------------
export DIR_PATH_ANDROID_DECOMPILE=${rDirPathUserHome}/xconfig/decompile
export DIR_PATH_ANDROID_DECOMPILE_TOOLS=${DIR_PATH_ANDROID_DECOMPILE}/tools
