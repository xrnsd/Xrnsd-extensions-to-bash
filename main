# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
#HISTSIZE=1000
#HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

#added by wgx : xbash初始化
#---------------- bash 配置 ----------------------------------
    shopt -s histappend    #多个终端情况下，共享history

#---------------- 初始化变量 ----------------------------------
    [[ -z "$SUDO_USER" ]] && userName=$USER || userName=$SUDO_USER
    export filePathHomeBash=$BASH_SOURCE
    export dirPathHomeXbash=$(dirname $(readlink -f  $BASH_SOURCE))
    export dirNameXbash=$(basename $dirPathHomeXbash)

    dirNameHome=$(echo "$dirPathHomeXbash"| sed 's?/? ?g'| awk '{print $2}')
    export dirPathHome=/home/${dirNameHome:-"$userName"}
    [[ $userName = "root" ]] && export dirPathHome="/root"

    [ ! -d "$dirPathHomeXbash" ] && echo -e "\033[1;31mXbash下实现的自定义命令不可用[dirPathHomeXbash=$dirPathHomeXbash]\033[0m" && return
    export dirPathHomeTools=${dirPathHome}/tools
    export dirPathHomeXbashConfig=${dirPathHomeXbash}/config
    export dirPathHomeXbashConfigUser=${dirPathHomeXbashConfig}/user

#---------------- 加载配置 ------------------
    # 加载common配置
    filePathXbashTragetBashrcConfigBase=${dirPathHomeXbashConfig}/common.config
    if [[ -f $filePathXbashTragetBashrcConfigBase ]];then source $filePathXbashTragetBashrcConfigBase
    else echo -e "\033[1;31mXbash需要的基础配置\n${filePathXbashTragetBashrcConfigBase}\033[0m不存在" ;return ;fi
    # 加载用户配置
    filePathUserConfig=${dirPathHomeXbashConfigUser}/${userName}.config
    if [ ! -f "$filePathUserConfig" ];then
        filePathExpmaleConfig=${dirPathHomeXbashConfig}/expmale.config
        [ ! -f $filePathExpmaleConfig ] && echo -e "\033[1;31m用户${userName}独立配置创建失败,缺少模版:\n $filePathExpmaleConfig\033[0m" && return
        echo -e "\033[1;33m初始化用户[${userName}]的xbash配置\n\033[0m"
        ${dirPathHomeXbash}/init --userconfig
    fi
    if [[ -f $filePathUserConfig ]];then source  $filePathUserConfig
    else echo -e "\033[1;31用户[${userName}]的xbash配置不存在:\n${filePathUserConfig}\033[0m" ;fi

#---------------- 加载扩展 ------------------
    #加载common
    if [[ -f $rFilePathXbashModuleCommon ]];then source  $rFilePathXbashModuleCommon
    else echo -e "\033[1;31mXbash的框架和公用扩展块加载失败\n${rFilePathXbashModuleCommon}\033[0m" ;return ;fi
    #加载auto
    if [[ -f $rFilePathXbashModuleAuto ]];then source  $rFilePathXbashModuleAuto
    else echo -e "\033[1;31mXbash的Auto扩展块加载失败\n${rFilePathXbashModuleAuto}\033[0m" ;fi
    #加载git
    if [[ -f $rFilePathXbashModuleGit ]];then source  $rFilePathXbashModuleGit
    else echo -e "\033[1;31mXbash的git扩展块加载失败\n${rFilePathXbashModuleGit}\033[0m" ;fi
    #加载git,非自定义的bash扩展
    if [[ -f $rFilePathGitBash ]];then source  $rFilePathGitBash
    else echo -e "\033[1;31m非Xbash自定义的git扩展块加载失败\n${rFilePathGitBash}\033[0m" ;fi
    #加载命令封装
    if [[ -f $rFilePathXbashModuleBasePackaging ]];then source  $rFilePathXbashModuleBasePackaging
    else echo -e "\033[1;31mXbash的命令封装加载失败\n${rFilePathXbashModuleBasePackaging}\033[0m" ;fi
    #加载user自定义扩展
    if [ ! -f $rFilePathXbashModuleUser ]; then
        [ ! -d $rDirPathXbashModuleUser ] && mkdir $rDirPathXbashModuleUser
        echo "#! /bin/bash" > $rFilePathXbashModuleUser
    fi
    if [[ -f $rFilePathXbashModuleUser ]];then source  $rFilePathXbashModuleUser
    else echo -e "\033[1;31mXbash的用户独立模块创建失败:\n${rFilePathXbashModuleUser}\033[0m" ;fi
    #加载input
    [ -f $rFilePathXbashModuleInput ] && [ "$rFilePathXbashModuleInput" != "$(readlink -f ~/.inputrc)" ] && rm -rf ~/.inputrc && ln -sf $rFilePathXbashModuleInput ~/.inputrc

#---------------- 默认启用部分xbash功能 ------------------
    #处理bash历史记录
    ftBashHistory
    #校验用户配置和模版版本一致性
    ftCheckUserConfig
    #校验用户数据库和模版版本一致性
    ftCheckUserDatabase
    #校验ccache是否有足够的剩余空间
    ftCheckCcache
